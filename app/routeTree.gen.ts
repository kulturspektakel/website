/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SpeisekarteImport } from './routes/speisekarte'
import { Route as PlakateImport } from './routes/plakate'
import { Route as NuclinoSsoImport } from './routes/nuclino-sso'
import { Route as LogoImport } from './routes/logo'
import { Route as LineupImport } from './routes/lineup'
import { Route as InfosImport } from './routes/infos'
import { Route as EventsImport } from './routes/events'
import { Route as BadgesImport } from './routes/badges'
import { Route as AngebotImport } from './routes/angebot'
import { Route as SlugImport } from './routes/$slug'
import { Route as IndexImport } from './routes/index'
import { Route as LineupIndexImport } from './routes/lineup.index'
import { Route as NewsArchivImport } from './routes/news.archiv'
import { Route as NewsSlugImport } from './routes/news.$slug'
import { Route as LineupYearImport } from './routes/lineup.$year'
import { Route as EventsIdImport } from './routes/events_.$id'
import { Route as LineupYearSlugImport } from './routes/lineup.$year.$slug'

// Create/Update Routes

const SpeisekarteRoute = SpeisekarteImport.update({
  id: '/speisekarte',
  path: '/speisekarte',
  getParentRoute: () => rootRoute,
} as any)

const PlakateRoute = PlakateImport.update({
  id: '/plakate',
  path: '/plakate',
  getParentRoute: () => rootRoute,
} as any)

const NuclinoSsoRoute = NuclinoSsoImport.update({
  id: '/nuclino-sso',
  path: '/nuclino-sso',
  getParentRoute: () => rootRoute,
} as any)

const LogoRoute = LogoImport.update({
  id: '/logo',
  path: '/logo',
  getParentRoute: () => rootRoute,
} as any)

const LineupRoute = LineupImport.update({
  id: '/lineup',
  path: '/lineup',
  getParentRoute: () => rootRoute,
} as any)

const InfosRoute = InfosImport.update({
  id: '/infos',
  path: '/infos',
  getParentRoute: () => rootRoute,
} as any)

const EventsRoute = EventsImport.update({
  id: '/events',
  path: '/events',
  getParentRoute: () => rootRoute,
} as any)

const BadgesRoute = BadgesImport.update({
  id: '/badges',
  path: '/badges',
  getParentRoute: () => rootRoute,
} as any)

const AngebotRoute = AngebotImport.update({
  id: '/angebot',
  path: '/angebot',
  getParentRoute: () => rootRoute,
} as any)

const SlugRoute = SlugImport.update({
  id: '/$slug',
  path: '/$slug',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const LineupIndexRoute = LineupIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LineupRoute,
} as any)

const NewsArchivRoute = NewsArchivImport.update({
  id: '/news/archiv',
  path: '/news/archiv',
  getParentRoute: () => rootRoute,
} as any)

const NewsSlugRoute = NewsSlugImport.update({
  id: '/news/$slug',
  path: '/news/$slug',
  getParentRoute: () => rootRoute,
} as any)

const LineupYearRoute = LineupYearImport.update({
  id: '/$year',
  path: '/$year',
  getParentRoute: () => LineupRoute,
} as any)

const EventsIdRoute = EventsIdImport.update({
  id: '/events_/$id',
  path: '/events/$id',
  getParentRoute: () => rootRoute,
} as any)

const LineupYearSlugRoute = LineupYearSlugImport.update({
  id: '/$slug',
  path: '/$slug',
  getParentRoute: () => LineupYearRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/$slug': {
      id: '/$slug'
      path: '/$slug'
      fullPath: '/$slug'
      preLoaderRoute: typeof SlugImport
      parentRoute: typeof rootRoute
    }
    '/angebot': {
      id: '/angebot'
      path: '/angebot'
      fullPath: '/angebot'
      preLoaderRoute: typeof AngebotImport
      parentRoute: typeof rootRoute
    }
    '/badges': {
      id: '/badges'
      path: '/badges'
      fullPath: '/badges'
      preLoaderRoute: typeof BadgesImport
      parentRoute: typeof rootRoute
    }
    '/events': {
      id: '/events'
      path: '/events'
      fullPath: '/events'
      preLoaderRoute: typeof EventsImport
      parentRoute: typeof rootRoute
    }
    '/infos': {
      id: '/infos'
      path: '/infos'
      fullPath: '/infos'
      preLoaderRoute: typeof InfosImport
      parentRoute: typeof rootRoute
    }
    '/lineup': {
      id: '/lineup'
      path: '/lineup'
      fullPath: '/lineup'
      preLoaderRoute: typeof LineupImport
      parentRoute: typeof rootRoute
    }
    '/logo': {
      id: '/logo'
      path: '/logo'
      fullPath: '/logo'
      preLoaderRoute: typeof LogoImport
      parentRoute: typeof rootRoute
    }
    '/nuclino-sso': {
      id: '/nuclino-sso'
      path: '/nuclino-sso'
      fullPath: '/nuclino-sso'
      preLoaderRoute: typeof NuclinoSsoImport
      parentRoute: typeof rootRoute
    }
    '/plakate': {
      id: '/plakate'
      path: '/plakate'
      fullPath: '/plakate'
      preLoaderRoute: typeof PlakateImport
      parentRoute: typeof rootRoute
    }
    '/speisekarte': {
      id: '/speisekarte'
      path: '/speisekarte'
      fullPath: '/speisekarte'
      preLoaderRoute: typeof SpeisekarteImport
      parentRoute: typeof rootRoute
    }
    '/events_/$id': {
      id: '/events_/$id'
      path: '/events/$id'
      fullPath: '/events/$id'
      preLoaderRoute: typeof EventsIdImport
      parentRoute: typeof rootRoute
    }
    '/lineup/$year': {
      id: '/lineup/$year'
      path: '/$year'
      fullPath: '/lineup/$year'
      preLoaderRoute: typeof LineupYearImport
      parentRoute: typeof LineupImport
    }
    '/news/$slug': {
      id: '/news/$slug'
      path: '/news/$slug'
      fullPath: '/news/$slug'
      preLoaderRoute: typeof NewsSlugImport
      parentRoute: typeof rootRoute
    }
    '/news/archiv': {
      id: '/news/archiv'
      path: '/news/archiv'
      fullPath: '/news/archiv'
      preLoaderRoute: typeof NewsArchivImport
      parentRoute: typeof rootRoute
    }
    '/lineup/': {
      id: '/lineup/'
      path: '/'
      fullPath: '/lineup/'
      preLoaderRoute: typeof LineupIndexImport
      parentRoute: typeof LineupImport
    }
    '/lineup/$year/$slug': {
      id: '/lineup/$year/$slug'
      path: '/$slug'
      fullPath: '/lineup/$year/$slug'
      preLoaderRoute: typeof LineupYearSlugImport
      parentRoute: typeof LineupYearImport
    }
  }
}

// Create and export the route tree

interface LineupYearRouteChildren {
  LineupYearSlugRoute: typeof LineupYearSlugRoute
}

const LineupYearRouteChildren: LineupYearRouteChildren = {
  LineupYearSlugRoute: LineupYearSlugRoute,
}

const LineupYearRouteWithChildren = LineupYearRoute._addFileChildren(
  LineupYearRouteChildren,
)

interface LineupRouteChildren {
  LineupYearRoute: typeof LineupYearRouteWithChildren
  LineupIndexRoute: typeof LineupIndexRoute
}

const LineupRouteChildren: LineupRouteChildren = {
  LineupYearRoute: LineupYearRouteWithChildren,
  LineupIndexRoute: LineupIndexRoute,
}

const LineupRouteWithChildren =
  LineupRoute._addFileChildren(LineupRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$slug': typeof SlugRoute
  '/angebot': typeof AngebotRoute
  '/badges': typeof BadgesRoute
  '/events': typeof EventsRoute
  '/infos': typeof InfosRoute
  '/lineup': typeof LineupRouteWithChildren
  '/logo': typeof LogoRoute
  '/nuclino-sso': typeof NuclinoSsoRoute
  '/plakate': typeof PlakateRoute
  '/speisekarte': typeof SpeisekarteRoute
  '/events/$id': typeof EventsIdRoute
  '/lineup/$year': typeof LineupYearRouteWithChildren
  '/news/$slug': typeof NewsSlugRoute
  '/news/archiv': typeof NewsArchivRoute
  '/lineup/': typeof LineupIndexRoute
  '/lineup/$year/$slug': typeof LineupYearSlugRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$slug': typeof SlugRoute
  '/angebot': typeof AngebotRoute
  '/badges': typeof BadgesRoute
  '/events': typeof EventsRoute
  '/infos': typeof InfosRoute
  '/logo': typeof LogoRoute
  '/nuclino-sso': typeof NuclinoSsoRoute
  '/plakate': typeof PlakateRoute
  '/speisekarte': typeof SpeisekarteRoute
  '/events/$id': typeof EventsIdRoute
  '/lineup/$year': typeof LineupYearRouteWithChildren
  '/news/$slug': typeof NewsSlugRoute
  '/news/archiv': typeof NewsArchivRoute
  '/lineup': typeof LineupIndexRoute
  '/lineup/$year/$slug': typeof LineupYearSlugRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/$slug': typeof SlugRoute
  '/angebot': typeof AngebotRoute
  '/badges': typeof BadgesRoute
  '/events': typeof EventsRoute
  '/infos': typeof InfosRoute
  '/lineup': typeof LineupRouteWithChildren
  '/logo': typeof LogoRoute
  '/nuclino-sso': typeof NuclinoSsoRoute
  '/plakate': typeof PlakateRoute
  '/speisekarte': typeof SpeisekarteRoute
  '/events_/$id': typeof EventsIdRoute
  '/lineup/$year': typeof LineupYearRouteWithChildren
  '/news/$slug': typeof NewsSlugRoute
  '/news/archiv': typeof NewsArchivRoute
  '/lineup/': typeof LineupIndexRoute
  '/lineup/$year/$slug': typeof LineupYearSlugRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$slug'
    | '/angebot'
    | '/badges'
    | '/events'
    | '/infos'
    | '/lineup'
    | '/logo'
    | '/nuclino-sso'
    | '/plakate'
    | '/speisekarte'
    | '/events/$id'
    | '/lineup/$year'
    | '/news/$slug'
    | '/news/archiv'
    | '/lineup/'
    | '/lineup/$year/$slug'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$slug'
    | '/angebot'
    | '/badges'
    | '/events'
    | '/infos'
    | '/logo'
    | '/nuclino-sso'
    | '/plakate'
    | '/speisekarte'
    | '/events/$id'
    | '/lineup/$year'
    | '/news/$slug'
    | '/news/archiv'
    | '/lineup'
    | '/lineup/$year/$slug'
  id:
    | '__root__'
    | '/'
    | '/$slug'
    | '/angebot'
    | '/badges'
    | '/events'
    | '/infos'
    | '/lineup'
    | '/logo'
    | '/nuclino-sso'
    | '/plakate'
    | '/speisekarte'
    | '/events_/$id'
    | '/lineup/$year'
    | '/news/$slug'
    | '/news/archiv'
    | '/lineup/'
    | '/lineup/$year/$slug'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SlugRoute: typeof SlugRoute
  AngebotRoute: typeof AngebotRoute
  BadgesRoute: typeof BadgesRoute
  EventsRoute: typeof EventsRoute
  InfosRoute: typeof InfosRoute
  LineupRoute: typeof LineupRouteWithChildren
  LogoRoute: typeof LogoRoute
  NuclinoSsoRoute: typeof NuclinoSsoRoute
  PlakateRoute: typeof PlakateRoute
  SpeisekarteRoute: typeof SpeisekarteRoute
  EventsIdRoute: typeof EventsIdRoute
  NewsSlugRoute: typeof NewsSlugRoute
  NewsArchivRoute: typeof NewsArchivRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SlugRoute: SlugRoute,
  AngebotRoute: AngebotRoute,
  BadgesRoute: BadgesRoute,
  EventsRoute: EventsRoute,
  InfosRoute: InfosRoute,
  LineupRoute: LineupRouteWithChildren,
  LogoRoute: LogoRoute,
  NuclinoSsoRoute: NuclinoSsoRoute,
  PlakateRoute: PlakateRoute,
  SpeisekarteRoute: SpeisekarteRoute,
  EventsIdRoute: EventsIdRoute,
  NewsSlugRoute: NewsSlugRoute,
  NewsArchivRoute: NewsArchivRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$slug",
        "/angebot",
        "/badges",
        "/events",
        "/infos",
        "/lineup",
        "/logo",
        "/nuclino-sso",
        "/plakate",
        "/speisekarte",
        "/events_/$id",
        "/news/$slug",
        "/news/archiv"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/$slug": {
      "filePath": "$slug.tsx"
    },
    "/angebot": {
      "filePath": "angebot.tsx"
    },
    "/badges": {
      "filePath": "badges.tsx"
    },
    "/events": {
      "filePath": "events.tsx"
    },
    "/infos": {
      "filePath": "infos.tsx"
    },
    "/lineup": {
      "filePath": "lineup.tsx",
      "children": [
        "/lineup/$year",
        "/lineup/"
      ]
    },
    "/logo": {
      "filePath": "logo.tsx"
    },
    "/nuclino-sso": {
      "filePath": "nuclino-sso.tsx"
    },
    "/plakate": {
      "filePath": "plakate.tsx"
    },
    "/speisekarte": {
      "filePath": "speisekarte.tsx"
    },
    "/events_/$id": {
      "filePath": "events_.$id.tsx"
    },
    "/lineup/$year": {
      "filePath": "lineup.$year.tsx",
      "parent": "/lineup",
      "children": [
        "/lineup/$year/$slug"
      ]
    },
    "/news/$slug": {
      "filePath": "news.$slug.tsx"
    },
    "/news/archiv": {
      "filePath": "news.archiv.tsx"
    },
    "/lineup/": {
      "filePath": "lineup.index.tsx",
      "parent": "/lineup"
    },
    "/lineup/$year/$slug": {
      "filePath": "lineup.$year.$slug.tsx",
      "parent": "/lineup/$year"
    }
  }
}
ROUTE_MANIFEST_END */
