generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
  binaryTargets   = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Viewer {
  id                     String                   @id @default(uuid())
  displayName            String
  email                  String
  profilePicture         String?
  slackToken             String?
  slackScopes            String[]
  updatedAt              DateTime                 @default(now()) @updatedAt
  BandApplication        BandApplication[]
  BandApplicationComment BandApplicationComment[]
  BandApplicationRating  BandApplicationRating[]
  Nonce                  Nonce[]
  ViewerLocation         ViewerLocation[]
  NonceRequest           NonceRequest[]
  BandApplicationTag     BandApplicationTag[]
  CrewCard               CrewCard[]
}

model Area {
  id              String            @id
  displayName     String
  order           Int
  themeColor      String
  latitude        Float
  longitude       Float
  areaOpeningHour AreaOpeningHour[]
  BandPlaying     BandPlaying[]
}

model AreaOpeningHour {
  id        Int      @id @default(autoincrement())
  startTime DateTime
  endTime   DateTime
  areaId    String
  area      Area     @relation(fields: [areaId], references: [id])
}

model Page {
  slug    String  @id
  title   String
  content String?
  left    String?
  right   String?
  bottom  String?
}

model ProductList {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(20)
  emoji       String?
  active      Boolean     @default(true)
  updatedAt   DateTime?
  Device      Device[]
  OrderItem   OrderItem[]
  product     Product[]
  description String?
}

model Product {
  id              Int                @id @default(autoincrement())
  name            String             @db.VarChar(30)
  price           Int
  order           Int
  productListId   Int
  requiresDeposit Boolean            @default(false)
  productList     ProductList        @relation(fields: [productListId], references: [id])
  additives       ProductAdditives[]
}

model ProductAdditives {
  id          String    @id
  displayName String
  Product     Product[]
}

model Device {
  id              String       @id
  lastSeen        DateTime?
  productListId   Int?
  softwareVersion String?
  type            DeviceType
  productList     ProductList? @relation(fields: [productListId], references: [id])
  Order           Order[]
  DeviceLog       DeviceLog[]
}

model Order {
  id              Int               @id @default(autoincrement())
  createdAt       DateTime          @default(now())
  payment         OrderPayment
  deposit         Int               @default(0)
  deviceId        String?
  device          Device?           @relation(fields: [deviceId], references: [id])
  items           OrderItem[]
  CardTransaction CardTransaction[]

  crewCardId Bytes?
  crewCard   CrewCard? @relation(fields: [crewCardId], references: [id])
}

model OrderItem {
  id            Int          @id @default(autoincrement())
  orderId       Int
  amount        Int
  note          String?
  name          String
  perUnitPrice  Int
  productListId Int?
  order         Order        @relation(fields: [orderId], references: [id])
  productList   ProductList? @relation(fields: [productListId], references: [id])
}

model CardTransaction {
  clientId        String              @id
  cardId          String
  depositBefore   Int
  depositAfter    Int
  balanceBefore   Int
  balanceAfter    Int
  transactionType CardTransactionType

  counter   Int?
  deviceLog DeviceLog @relation(fields: [clientId], references: [clientId])
  Order     Order?    @relation(fields: [orderId], references: [id])
  orderId   Int?
}

model CrewCard {
  id         Bytes    @id
  validUntil DateTime
  nickname   String?
  suspended  Boolean?
  privileged Boolean?
  viewerId   String?
  viewer     Viewer?  @relation(fields: [viewerId], references: [id])
  Order      Order[]
  enrolledAt DateTime
}

model DeviceLog {
  clientId        String            @id
  batteryVoltage  Int?
  usbVoltage      Int?
  deviceId        String
  createdAt       DateTime          @default(now())
  deviceTime      DateTime
  device          Device            @relation(fields: [deviceId], references: [id])
  CardTransaction CardTransaction[]
}

model BandApplication {
  id                      String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt               DateTime                 @default(now())
  email                   String
  bandname                String
  genre                   String?
  city                    String
  facebook                String?
  demo                    String?
  description             String?
  numberOfArtists         Int?
  numberOfNonMaleArtists  Int?
  contactName             String
  contactPhone            String
  knowsKultFrom           String?
  distance                Float?
  facebookLikes           Int?
  website                 String?
  genreCategory           GenreCategory
  heardAboutBookingFrom   HeardAboutBookingFrom?
  contactedByViewerId     String?
  instagram               String?
  instagramFollower       Int?
  eventId                 String
  hasPreviouslyPlayed     PreviouslyPlayed?
  lastContactedAt         DateTime?
  latitude                Float?
  longitude               Float?
  demoEmbedUrl            String?
  demoEmbed               String?
  demoEmbedType           DemoEmbedType?
  contactedByViewer       Viewer?                  @relation(fields: [contactedByViewerId], references: [id])
  event                   Event                    @relation(fields: [eventId], references: [id])
  bandApplicationComment  BandApplicationComment[]
  bandApplicationRating   BandApplicationRating[]
  spotifyArtist           String?
  spotifyMonthlyListeners Int?
  repertoire              BandRepertoire?
  BandApplicationTag      BandApplicationTag[]
}

model BandApplicationTag {
  bandApplicationId String   @db.Uuid
  tag               String   @db.Citext
  createdAt         DateTime @default(now())
  createdByViewerId String

  bandApplication BandApplication @relation(fields: [bandApplicationId], references: [id])
  createdByViewer Viewer          @relation(fields: [createdByViewerId], references: [id])

  @@unique([bandApplicationId, tag])
}

model BandApplicationRating {
  viewerId          String
  rating            Int
  bandApplicationId String          @db.Uuid
  bandApplication   BandApplication @relation(fields: [bandApplicationId], references: [id])
  viewer            Viewer          @relation(fields: [viewerId], references: [id])

  @@id([viewerId, bandApplicationId])
  @@index([bandApplicationId])
}

model BandApplicationComment {
  id                String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt         DateTime        @default(now())
  viewerId          String
  comment           String
  bandApplicationId String          @db.Uuid
  bandApplication   BandApplication @relation(fields: [bandApplicationId], references: [id])
  viewer            Viewer          @relation(fields: [viewerId], references: [id])
}

model Event {
  id                   String            @id
  name                 String
  start                DateTime
  end                  DateTime
  eventType            EventType
  bandApplicationStart DateTime?
  djApplicationStart   DateTime?
  bandApplicationEnd   DateTime?
  djApplicationEnd     DateTime?
  poster               String?           @db.Uuid
  description          String?
  bandApplication      BandApplication[]
  BandPlaying          BandPlaying[]
  location             String?
  latitude             Float?
  longitude            Float?
}

model BandPlaying {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String
  startTime        DateTime
  endTime          DateTime
  description      String?
  shortDescription String?
  genre            String?
  instagram        String?
  spotify          String?
  facebook         String?
  website          String?
  youtube          String?
  soundcloud       String?
  areaId           String
  eventId          String
  slug             String
  photo            String?   @db.Uuid
  area             Area      @relation(fields: [areaId], references: [id])
  event            Event     @relation(fields: [eventId], references: [id])
  announcementTime DateTime?

  @@unique([areaId, startTime])
  @@unique([eventId, slug])
}

model Nonce {
  nonce        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  expiresAt    DateTime
  createdForId String?
  createdFor   Viewer?  @relation(fields: [createdForId], references: [id])
}

model NonceRequest {
  id           String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  expiresAt    DateTime
  createdForId String?
  createdFor   Viewer?            @relation(fields: [createdForId], references: [id])
  status       NonceRequestStatus @default(Pending)
}

model GmailReminders {
  messageId String @id
  account   String
}

model DevicePrivilegeToken {
  id    Bytes   @id
  label String?
}

model DeviceConfigVersion {
  crc32     Int      @unique
  version   Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
}

enum NonceRequestStatus {
  Pending
  Approved
  Rejected
}

model News {
  slug      String   @id
  title     String
  content   String
  createdAt DateTime @default(now())
}

model TwoFactor {
  account String
  service String
  secret  String

  @@unique([account, service])
}

model ItemLocation {
  timeStamp DateTime @id
  latitude  Float
  longitude Float
  payload   Json
}

model ViewerLocation {
  id        String   @id @default(cuid())
  viewerId  String
  viewer    Viewer   @relation(fields: [viewerId], references: [id])
  createdAt DateTime
  latitude  Float
  longitude Float
  payload   Json
}

model ShortDomainRedirect {
  slug      String @id
  targetUrl String
}

model Donation {
  id                 String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  amount             Int
  createdAt          DateTime       @default(now())
  email              String?
  name               String? // publicily visisble name
  namePrivate        String?
  sentConfirmationAt DateTime?
  spendenQuittungAt  DateTime?
  message            String?
  reference          String? // stripe ID
  source             DonationSource

  @@index([reference])
}

enum DonationSource {
  Stripe
  Manual
  Membership
  Other
}

enum OrderPayment {
  CASH
  BON
  SUM_UP
  VOUCHER
  FREE_CREW
  FREE_BAND
  KULT_CARD
}

enum DeviceType {
  CONTACTLESS_TERMINAL
  IPAD
}

enum CardTransactionType {
  TopUp
  Charge
  Cashout
  Repair
  Donation
}

enum DemoEmbedType {
  Unresolvable
  YouTubeVideo
  YouTubePlaylist
  BandcampAlbum
  BandcampTrack
  SoundcloudUrl
  SpotifyTrack
  SpotifyArtist
  SpotifyAlbum
}

enum PreviouslyPlayed {
  Yes
  OtherFormation
  No
}

enum GenreCategory {
  Rock
  Pop
  Indie
  Reggae_Ska
  Blues_Funk_Jazz_Soul
  Folk_SingerSongwriter_Country
  Elektro_HipHop
  Hardrock_Metal_Punk
  Other
  DJ
}

enum HeardAboutBookingFrom {
  BYon
  Newspaper
  Friends
  Website
  Facebook
  Instagram
}

enum EventType {
  Kulturspektakel
  Other
  Locker
}

enum BandRepertoire {
  ExclusivelyOwnSongs
  MostlyOwnSongs
  MostlyCoverSongs
  ExclusivelyCoverSongs
}
